Here are the notes and example codes based on your points:

1. `ReentrantLock` is a concrete class for the `Lock` interface. It is a direct child of the `Object` class. The term "reentrant" means that a thread can acquire multiple locks without any issue. It will increment the thread's personal count whenever we call `lock()` and similarly decrement it when we call `unlock()`.

```java
import java.util.concurrent.locks.ReentrantLock;

ReentrantLock lock = new ReentrantLock();
```

2. Constructors:
   - `ReentrantLock()`: This will create an instance of the `ReentrantLock`.
   - `ReentrantLock(boolean fairness)`: This will create a `ReentrantLock` where if `fairness` is `true`, the longest waiting thread will get the chance. If `false`, we are not sure which thread will get the chance.

```java
ReentrantLock fairLock = new ReentrantLock(true);
ReentrantLock unfairLock = new ReentrantLock(false);
```

3. Functions available in the `ReentrantLock` class:
   - `getHoldCount()`: Returns the number of holds on this lock by the current thread.
   - `isHeldByCurrentThread()`: Queries if this lock is held by the current thread.
   - `getQueueLength()`: Returns an estimate of the number of threads waiting to acquire this lock.
   - `getQueuedThreads()`: Returns a collection containing threads that may be waiting to acquire this lock.
   - `hasQueuedThreads()`: Queries if any threads are waiting to acquire this lock.
   - `isLocked()`: Queries if this lock is held by any thread.
   - `isFair()`: Returns `true` if this lock has fairness set `true`.
   - `getOwner()`: Returns the thread that currently owns this lock, or `null` if not owned.

```java
System.out.println("Hold Count: " + lock.getHoldCount());
System.out.println("Held by current thread: " + lock.isHeldByCurrentThread());
System.out.println("Queue Length: " + lock.getQueueLength());
System.out.println("Queued Threads: " + lock.getQueuedThreads());
System.out.println("Has Queued Threads: " + lock.hasQueuedThreads());
System.out.println("Is Locked: " + lock.isLocked());
System.out.println("Is Fair: " + lock.isFair());
System.out.println("Owner: " + lock.getOwner());
```

Please note that the `ReentrantLock` class should be used as a last resort, given the complexity and responsibility of managing lock ownership. The first choice should be synchronized methods or blocks.